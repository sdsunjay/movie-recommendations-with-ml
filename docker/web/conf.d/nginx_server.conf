
upstream rails_app {
   server app:3000;
  }
server {
    listen 80;
    server_name 23.239.2.24;
    return 301 http://movierecommendationswithml.com;
}
server {
    # expect SSL requests, try to use HTTP2
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    keepalive_timeout 20s;   # default 75s
    server_name movierecommendationswithml.com www.movierecommendtionswithml.com;
    root   /var/www/movierecommendationswithml/public;
    index  index.html;

    error_page 500 502 503 504 /500.html;
    client_max_body_size 10M;

   # configure SSL
   ssl_certificate /etc/nginx/fullchain.pem;
   ssl_certificate_key /etc/nginx/privkey.pem;
   ssl_session_timeout 1d;
   ssl_session_cache shared:SSL:50m;
   ssl_session_tickets off;
   # ssl_dhparam $SSL_CERT_HOME/dhparam.pem;
   ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
   ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
   ssl_prefer_server_ciphers on;
   # OCSP stapling
   resolver 8.8.8.8 8.8.4.4;
   ssl_stapling on;
   ssl_stapling_verify on;

   # deny requests for files that should never be accessed
   location ~ /\. {
      deny all;
   }
   location ~* ^.+\.(log|php|txt)$ {
      deny all;
   }
   # See http://nginx.org/en/docs/http/ngx_http_referer_module.html#valid_referers
#   location ~ .(gif|png|jpe?g)$ {
#     valid_referers none blocked server_names
#               *.movierecommendationswithml.com movierecommendationswithml.*;
#      if ($invalid_referer) {
#         return   403;
#      }
#   }

   # serve static (compiled) assets directly if they exist (for rails production)
   location ~ ^/(assets|images|javascripts|stylesheets|swfs|system)/   {
       # The 'try_files' directive is NOT inherited from the parent block.
       # try_files $uri =404;

      # We could also use a less strict directive that falls back to the Rails app
      # if a requested asset cannot be found. In this case, the cache headers here
      # configured will be ignored and Rails will set them automatically.
      try_files $uri @rails_app;

      # Normally the Rails app takes care of serving the static file 'public/404.html'
      # when a 404 occours. Here, however, it will be handled by nginx.
      error_page 404 /404.html;

      access_log off;
      gzip_static on;
      # to serve pre-gzipped version
      expires max;
      add_header Cache-Control public;
      # proxy_cache my_cache;
      # proxy_ignore_headers Cache-Control;
      # proxy_cache_valid any 30m;
      add_header Last-Modified "";
      add_header ETag "";
      break;
   }


   try_files $uri $uri/index.html $uri.html @rails_app;

    location @rails_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://rails_app;
    }
    # send non-static file requests to the app server
    location / {
      try_files $uri @rails_app;
   }

}

server {
   listen 80;
   # define your domain
   server_name movierecommendationswithml.com www.movierecommendtionswithml.com;
   keepalive_timeout 10s;   # default 75s
   # define the public application root
   root   /var/www/movierecommendationswithml/public;
   index  index.html;
   error_page 500 502 503 504 /500.html;
   client_max_body_size 10M;
   # define where Nginx should write its logs
   # access_log /var/www/movierecommendationswithml/log/nginx.access.log;
   # error_log /var/www/movierecommendationswithml/log/nginx.error.log;

   # accept unencrypted ACME challenge requests
   location ^~ /.well-known/acme-challenge {
     alias /var/www/movierecommendationswithml/.well-known/acme-challenge/;
   }

   # deny requests for files that should never be accessed
   location ~ /\. {
      deny all;
   }
   location ~* ^.+\.(log|php|txt)$ {
      deny all;
   }
   # See http://nginx.org/en/docs/http/ngx_http_referer_module.html#valid_referers
# location ~ .(gif|png|jpe?g)$ {
#     valid_referers none blocked server_names
#               *.movierecommendationswithml.com movierecommendationswithml.*;
#      if ($invalid_referer) {
#         return   403;
#      }
#   }

   # serve static (compiled) assets directly if they exist (for rails production)
   location ~ ^/(assets|images|javascripts|stylesheets|swfs|system)/   {
      # The 'try_files' directive is NOT inherited from the parent block.
      # try_files $uri =404;

      # We could also use a less strict directive that falls back to the Rails app
      # if a requested asset cannot be found. In this case, the cache headers here
      # configured will be ignored and Rails will set them automatically.
      try_files $uri @rails_app;

      # Normally the Rails app takes care of serving the static file 'public/404.html'
      # when a 404 occours. Here, however, it will be handled by nginx.
      error_page 404 /404.html;

      access_log off;
      gzip_static on;
      # to serve pre-gzipped version
      expires max;
      add_header Cache-Control public;
      # proxy_cache my_cache;
      # proxy_ignore_headers Cache-Control;
      # proxy_cache_valid any 30m;
      add_header Last-Modified "";
      add_header ETag "";
      break;
   }


   try_files $uri $uri/index.html $uri.html @rails_app;

    location @rails_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://rails_app;
    }
    # send non-static file requests to the app server
    location / {
      try_files $uri @rails_app;
   }
}
